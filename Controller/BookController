package NewLibraryService.LibraryServicedemo.controllers;

import NewLibraryService.LibraryServicedemo.dto.BookDto;
import NewLibraryService.LibraryServicedemo.entity.Book;
import NewLibraryService.LibraryServicedemo.entity.User;
import NewLibraryService.LibraryServicedemo.exception.BookNotFoundException;
import NewLibraryService.LibraryServicedemo.services.BookService;
import jakarta.validation.Valid;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;


import java.util.List;

@RestController
@RequestMapping("/api")
public class BookController {

    @Autowired
    private BookService bookService;

    @GetMapping("/books")
    public ResponseEntity<List<Book>> getAll(){
        List<Book> books = bookService.findAllBooks();
        return new ResponseEntity<>(books, HttpStatus.OK);
    }

    @GetMapping("/books/{bookName}")
    public ResponseEntity<List<Book>> searchByTitle(@PathVariable String bookName){
        List<Book> books = bookService.searchByName(bookName);
        return new ResponseEntity<>(books, HttpStatus.OK);
    }

    @PostMapping("/books")
    public ResponseEntity<Book> createBook(@RequestBody @Valid BookDto book){
        Book savedBook = bookService.createBook(book);
        return new ResponseEntity<>(savedBook, HttpStatus.CREATED);
    }

    @RequestMapping("/aBooks/{id}")
    public Book getSingleBook(@PathVariable Long id) throws BookNotFoundException{
        return bookService.getSingleBook(id);
    }

    @RequestMapping(method = RequestMethod.PUT, value="/Books/{id}")
     public void updateBook(@RequestBody Book book, @PathVariable Long id){
         bookService.updateBook(book);
    }

    @RequestMapping(method = RequestMethod.DELETE, value = "/Books/{id}")
    public void deleteBook(@PathVariable Long id){
         bookService.deleteBook(id);
    }

    @RequestMapping(method = RequestMethod.POST, value ="/borrowBook/{bookId}/user/{userId}")
    public ResponseEntity<Book> borrowBook(@PathVariable Long bookId, @PathVariable Long userId) throws BookNotFoundException {
        Book book = bookService.borrowBook(bookId, userId);
        if(book!=null){
            return new ResponseEntity<>(book, HttpStatus.OK);
        }else{
            return new ResponseEntity<>(HttpStatus.NOT_FOUND);
        }
    }

    @RequestMapping(method = RequestMethod.POST, value ="/returnBook/{bookId}/user/{userId}")
    public ResponseEntity<?> returnBook( @PathVariable Long bookId, @PathVariable Long userId){
        Book returnedBook = bookService.returnBook(bookId, userId);
        if(returnedBook!=null) {
            if (returnedBook.getBookCarry() != null) {
                boolean isLate = returnedBook.getBookCarry().isLateMark();
                String message;
                if (isLate) {
                    message = "Book was returned but not on time";
                } else {
                    message = "Book returned on time";
                }
                return ResponseEntity.ok().body(message);
            } else {
                return ResponseEntity.status(HttpStatus.NOT_FOUND).body("The book is not associated with any user.");
            }
        }else{
            return ResponseEntity.status(HttpStatus.NOT_FOUND).body("Book or user are not found");
        }
    }

}

