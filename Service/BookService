package com.LibraryManagmentSystem.LibraryManagmentSystem.Service;

import java.time.LocalDate;
import java.util.List;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.LibraryManagmentSystem.LibraryManagmentSystem.Entity.Book;
import com.LibraryManagmentSystem.LibraryManagmentSystem.Entity.User;
import com.LibraryManagmentSystem.LibraryManagmentSystem.Repository.BookRepository;
import com.LibraryManagmentSystem.LibraryManagmentSystem.Repository.UserRepository;

@Service
public class BookService{
	
	@Autowired
	private UserRepository userRepository;
	
	@Autowired
	private BookRepository bookRepository;
	
    public List<Book> findAll() {
        return bookRepository.findAll();
    }

    public Book findById(Long id) {
        return bookRepository.findById(id).orElse(null);
    }

    public Book save(Book book) {
        return bookRepository.save(book);
    }

    public void deleteById(Long id) {
        bookRepository.deleteById(id);
    }

    public Book borrowBook(Long bookId, Long userId) {
        Book book = findById(bookId);
        User user = userRepository.findById(userId).orElse(null);

        if(user==null || book==null) {
        	return null;
        }
        
        if("Overdue".equals(user.getRemarks())){
        	System.out.print("User has overdue books and cannot borrow more");
        	return null;
        }
        
        if (book != null && !book.isBorrowed() && user != null) {
            book.setBorrowedBy(user);
            book.setBorrowed(true);
            book.setDueDate(LocalDate.now().plusDays(7));
            return save(book);
        }
        // Handle errors (e.g., book not found, book already borrowed, user not found)
        return null;
    }

    public Book returnBook(Long bookId) {
        Book book = findById(bookId);
        if (book != null && book.isBorrowed()) {
            book.setBorrowedBy(null);
            book.setBorrowed(false);
            return save(book);
        }
        // Handle errors (e.g., book not found, book not borrowed)
        return null;
    }
    
    public void overDueBook() {
    	List<Book> books = bookRepository.findAll();
    	for(Book book: books) {
    		if(book.isBorrowed() && book.getDueDate().isBefore(LocalDate.now())) {
    			User user = book.getBorrowedBy();
    			if(user!=null) {
    				user.setRemarks("Overdue");
    				userRepository.save(user);
    			}
    		}
    	}
    }
    
}
